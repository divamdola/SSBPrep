{"ast":null,"code":"import axiosInstance from \"../utils/axiosInstance\";\nimport { ALL_PRODUCTS_REQUEST, ALL_PRODUCTS_SUCCESS, ALL_PRODUCTS_FAIL, CLEAR_ERRORS, TEST_REQUEST, TEST_SUCCESS, TEST_FAIL, TEST_SUBMIT_REQUEST, TEST_SUBMIT_SUCCESS, TEST_SUBMIT_FAIL, TEST_RESULT_REQUEST, TEST_RESULT_SUCCESS, TEST_RESULT_FAIL } from \"../constants/productConstants\";\nexport const getProducts = category => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_PRODUCTS_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.get(`/products?category=${category}`);\n    dispatch({\n      type: ALL_PRODUCTS_SUCCESS,\n      payload: data.booksByCategory[category] || []\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: ALL_PRODUCTS_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error fetching products\"\n    });\n  }\n};\n\n// Get All Test\nexport const getTests = category => async dispatch => {\n  try {\n    dispatch({\n      type: TEST_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.get(`/test?category=${category}`);\n    dispatch({\n      type: TEST_SUCCESS,\n      payload: data.tests || []\n    });\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response3$data;\n    console.error(\"❌ Test API Error:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    dispatch({\n      type: TEST_FAIL,\n      payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"Error fetching tests\"\n    });\n  }\n};\n\n//Submit Test\nexport const submitTest = testData => async dispatch => {\n  try {\n    dispatch({\n      type: TEST_SUBMIT_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.post(`/test/submit/${testData.testId}`, testData);\n    dispatch({\n      type: TEST_SUBMIT_SUCCESS,\n      payload: data.attempt // assuming response is { attempt: {...} }\n    });\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    dispatch({\n      type: TEST_SUBMIT_FAIL,\n      payload: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || error.message\n    });\n  }\n};\n\n//Get Result\nexport const getResult = testId => async dispatch => {\n  try {\n    dispatch({\n      type: TEST_RESULT_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.get(`/test/result/${testId}`);\n    dispatch({\n      type: TEST_RESULT_SUCCESS,\n      payload: data.result\n    });\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    dispatch({\n      type: TEST_RESULT_FAIL,\n      payload: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message\n    });\n  }\n};\n\n// Clear Errors\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axiosInstance","ALL_PRODUCTS_REQUEST","ALL_PRODUCTS_SUCCESS","ALL_PRODUCTS_FAIL","CLEAR_ERRORS","TEST_REQUEST","TEST_SUCCESS","TEST_FAIL","TEST_SUBMIT_REQUEST","TEST_SUBMIT_SUCCESS","TEST_SUBMIT_FAIL","TEST_RESULT_REQUEST","TEST_RESULT_SUCCESS","TEST_RESULT_FAIL","getProducts","category","dispatch","type","data","get","payload","booksByCategory","error","_error$response","_error$response$data","response","message","getTests","tests","_error$response2","_error$response3","_error$response3$data","console","submitTest","testData","post","testId","attempt","_error$response4","_error$response4$data","getResult","result","_error$response5","_error$response5$data","clearErrors"],"sources":["C:/Users/divya/Desktop/Projects/SSBPrep/frontend/my-app/src/actions/productActions.js"],"sourcesContent":["import axiosInstance from \"../utils/axiosInstance\";\r\nimport {\r\n    ALL_PRODUCTS_REQUEST,\r\n    ALL_PRODUCTS_SUCCESS,\r\n    ALL_PRODUCTS_FAIL,\r\n    CLEAR_ERRORS,\r\n    TEST_REQUEST,\r\n    TEST_SUCCESS,\r\n    TEST_FAIL,\r\n    TEST_SUBMIT_REQUEST,\r\n    TEST_SUBMIT_SUCCESS,\r\n    TEST_SUBMIT_FAIL,\r\n    TEST_RESULT_REQUEST,\r\n    TEST_RESULT_SUCCESS,\r\n    TEST_RESULT_FAIL,\r\n} from \"../constants/productConstants\";\r\n\r\nexport const getProducts = (category) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ALL_PRODUCTS_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get(`/products?category=${category}`);\r\n\r\n    dispatch({\r\n      type: ALL_PRODUCTS_SUCCESS,\r\n      payload: data.booksByCategory[category] || [],\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_PRODUCTS_FAIL,\r\n      payload: error.response?.data?.message || \"Error fetching products\",\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// Get All Test\r\nexport const getTests = (category) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: TEST_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get(`/test?category=${category}`);\r\n    \r\n    dispatch({\r\n      type: TEST_SUCCESS,\r\n      payload: data.tests || [],\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"❌ Test API Error:\", error.response?.data || error.message);\r\n    dispatch({\r\n      type: TEST_FAIL,\r\n      payload: error.response?.data?.message || \"Error fetching tests\",\r\n    });\r\n  }\r\n};\r\n\r\n//Submit Test\r\nexport const submitTest = (testData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: TEST_SUBMIT_REQUEST });\r\n\r\n    const { data } = await axiosInstance.post(`/test/submit/${testData.testId}`, testData);\r\n\r\n    dispatch({\r\n      type: TEST_SUBMIT_SUCCESS,\r\n      payload: data.attempt, // assuming response is { attempt: {...} }\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: TEST_SUBMIT_FAIL,\r\n      payload: error.response?.data?.message || error.message,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n//Get Result\r\nexport const getResult = (testId) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: TEST_RESULT_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get(`/test/result/${testId}`);\r\n\r\n    dispatch({\r\n      type: TEST_RESULT_SUCCESS,\r\n      payload: data.result,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: TEST_RESULT_FAIL,\r\n      payload: error.response?.data?.message || error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Clear Errors\r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS,\r\n    });\r\n};\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,wBAAwB;AAClD,SACIC,oBAAoB,EACpBC,oBAAoB,EACpBC,iBAAiB,EACjBC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,SAAS,EACTC,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,QACb,+BAA+B;AAEtC,OAAO,MAAMC,WAAW,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EAC3D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEhB;IAAqB,CAAC,CAAC;IAExC,MAAM;MAAEiB;IAAK,CAAC,GAAG,MAAMlB,aAAa,CAACmB,GAAG,CAAC,sBAAsBJ,QAAQ,EAAE,CAAC;IAE1EC,QAAQ,CAAC;MACPC,IAAI,EAAEf,oBAAoB;MAC1BkB,OAAO,EAAEF,IAAI,CAACG,eAAe,CAACN,QAAQ,CAAC,IAAI;IAC7C,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdR,QAAQ,CAAC;MACPC,IAAI,EAAEd,iBAAiB;MACvBiB,OAAO,EAAE,EAAAG,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI;IAC5C,CAAC,CAAC;EACJ;AACF,CAAC;;AAGD;AACA,OAAO,MAAMC,QAAQ,GAAIZ,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EACxD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEZ;IAAa,CAAC,CAAC;IAEhC,MAAM;MAAEa;IAAK,CAAC,GAAG,MAAMlB,aAAa,CAACmB,GAAG,CAAC,kBAAkBJ,QAAQ,EAAE,CAAC;IAEtEC,QAAQ,CAAC;MACPC,IAAI,EAAEX,YAAY;MAClBc,OAAO,EAAEF,IAAI,CAACU,KAAK,IAAI;IACzB,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA,IAAAO,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACdC,OAAO,CAACV,KAAK,CAAC,mBAAmB,EAAE,EAAAO,gBAAA,GAAAP,KAAK,CAACG,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBX,IAAI,KAAII,KAAK,CAACI,OAAO,CAAC;IACzEV,QAAQ,CAAC;MACPC,IAAI,EAAEV,SAAS;MACfa,OAAO,EAAE,EAAAU,gBAAA,GAAAR,KAAK,CAACG,QAAQ,cAAAK,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsBL,OAAO,KAAI;IAC5C,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,UAAU,GAAIC,QAAQ,IAAK,MAAOlB,QAAQ,IAAK;EAC1D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAET;IAAoB,CAAC,CAAC;IAEvC,MAAM;MAAEU;IAAK,CAAC,GAAG,MAAMlB,aAAa,CAACmC,IAAI,CAAC,gBAAgBD,QAAQ,CAACE,MAAM,EAAE,EAAEF,QAAQ,CAAC;IAEtFlB,QAAQ,CAAC;MACPC,IAAI,EAAER,mBAAmB;MACzBW,OAAO,EAAEF,IAAI,CAACmB,OAAO,CAAE;IACzB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOf,KAAK,EAAE;IAAA,IAAAgB,gBAAA,EAAAC,qBAAA;IACdvB,QAAQ,CAAC;MACPC,IAAI,EAAEP,gBAAgB;MACtBU,OAAO,EAAE,EAAAkB,gBAAA,GAAAhB,KAAK,CAACG,QAAQ,cAAAa,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBpB,IAAI,cAAAqB,qBAAA,uBAApBA,qBAAA,CAAsBb,OAAO,KAAIJ,KAAK,CAACI;IAClD,CAAC,CAAC;EACJ;AACF,CAAC;;AAGD;AACA,OAAO,MAAMc,SAAS,GAAIJ,MAAM,IAAK,MAAOpB,QAAQ,IAAK;EACvD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEN;IAAoB,CAAC,CAAC;IAEvC,MAAM;MAAEO;IAAK,CAAC,GAAG,MAAMlB,aAAa,CAACmB,GAAG,CAAC,gBAAgBiB,MAAM,EAAE,CAAC;IAElEpB,QAAQ,CAAC;MACPC,IAAI,EAAEL,mBAAmB;MACzBQ,OAAO,EAAEF,IAAI,CAACuB;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOnB,KAAK,EAAE;IAAA,IAAAoB,gBAAA,EAAAC,qBAAA;IACd3B,QAAQ,CAAC;MACPC,IAAI,EAAEJ,gBAAgB;MACtBO,OAAO,EAAE,EAAAsB,gBAAA,GAAApB,KAAK,CAACG,QAAQ,cAAAiB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBxB,IAAI,cAAAyB,qBAAA,uBAApBA,qBAAA,CAAsBjB,OAAO,KAAIJ,KAAK,CAACI;IAClD,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMkB,WAAW,GAAGA,CAAA,KAAM,MAAO5B,QAAQ,IAAK;EACjDA,QAAQ,CAAC;IACLC,IAAI,EAAEb;EACV,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}