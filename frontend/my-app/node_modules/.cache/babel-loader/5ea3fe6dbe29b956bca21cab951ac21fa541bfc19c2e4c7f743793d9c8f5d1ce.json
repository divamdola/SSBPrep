{"ast":null,"code":"import axiosInstance from \"../utils/axiosInstance\";\nimport { ALL_PRODUCTS_REQUEST, ALL_PRODUCTS_SUCCESS, ALL_PRODUCTS_FAIL, UPDATE_PRODUCT_REQUEST, UPDATE_PRODUCT_SUCCESS, UPDATE_PRODUCT_FAIL, CLEAR_ERRORS, TEST_REQUEST, TEST_SUCCESS, TEST_FAIL, TEST_SUBMIT_REQUEST, TEST_SUBMIT_SUCCESS, TEST_SUBMIT_FAIL, TEST_RESULT_REQUEST, TEST_RESULT_SUCCESS, TEST_RESULT_FAIL } from \"../constants/productConstants\";\nexport const getProducts = category => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_PRODUCTS_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.get(`/products?category=${category}`);\n    dispatch({\n      type: ALL_PRODUCTS_SUCCESS,\n      payload: data.booksByCategory[category] || []\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: ALL_PRODUCTS_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error fetching products\"\n    });\n  }\n};\n\n//Update Product\nexport const updateProduct = (productId, productData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PRODUCT_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axiosInstance.put(`/products/${productId}`, productData, config);\n    dispatch({\n      type: UPDATE_PRODUCT_SUCCESS,\n      payload: data.product\n    });\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    dispatch({\n      type: UPDATE_PRODUCT_FAIL,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Error updating product\"\n    });\n  }\n};\n\n// Get All Test\nexport const getTests = category => async dispatch => {\n  try {\n    dispatch({\n      type: TEST_REQUEST\n    });\n\n    // Fetch tests by category\n    const {\n      data: testData\n    } = await axiosInstance.get(`/test?category=${category}`);\n\n    // Fetch user's attempts\n    const {\n      data: attemptsData\n    } = await axiosInstance.get(`/test/my-attempts`);\n    dispatch({\n      type: TEST_SUCCESS,\n      payload: {\n        tests: testData.tests || [],\n        attempts: attemptsData.attempts || []\n      }\n    });\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.error(\"❌ Test API Error:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    dispatch({\n      type: TEST_FAIL,\n      payload: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || \"Error fetching tests\"\n    });\n  }\n};\n\n//Submit Test\nexport const submitTest = testData => async dispatch => {\n  try {\n    dispatch({\n      type: TEST_SUBMIT_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.post(`/test/submit/${testData.testId}`, testData);\n    dispatch({\n      type: TEST_SUBMIT_SUCCESS,\n      payload: data.attempt // assuming response is { attempt: {...} }\n    });\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    dispatch({\n      type: TEST_SUBMIT_FAIL,\n      payload: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message\n    });\n  }\n};\n\n//Get Result\nexport const getResult = testId => async dispatch => {\n  try {\n    dispatch({\n      type: TEST_RESULT_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.get(`/test/result/${testId}`);\n    dispatch({\n      type: TEST_RESULT_SUCCESS,\n      payload: data.result\n    });\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    dispatch({\n      type: TEST_RESULT_FAIL,\n      payload: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message\n    });\n  }\n};\n\n// Clear Errors\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axiosInstance","ALL_PRODUCTS_REQUEST","ALL_PRODUCTS_SUCCESS","ALL_PRODUCTS_FAIL","UPDATE_PRODUCT_REQUEST","UPDATE_PRODUCT_SUCCESS","UPDATE_PRODUCT_FAIL","CLEAR_ERRORS","TEST_REQUEST","TEST_SUCCESS","TEST_FAIL","TEST_SUBMIT_REQUEST","TEST_SUBMIT_SUCCESS","TEST_SUBMIT_FAIL","TEST_RESULT_REQUEST","TEST_RESULT_SUCCESS","TEST_RESULT_FAIL","getProducts","category","dispatch","type","data","get","payload","booksByCategory","error","_error$response","_error$response$data","response","message","updateProduct","productId","productData","config","headers","put","product","_error$response2","_error$response2$data","getTests","testData","attemptsData","tests","attempts","_error$response3","_error$response4","_error$response4$data","console","submitTest","post","testId","attempt","_error$response5","_error$response5$data","getResult","result","_error$response6","_error$response6$data","clearErrors"],"sources":["C:/Users/divya/Desktop/Projects/SSBPrep/frontend/my-app/src/actions/productActions.js"],"sourcesContent":["import axiosInstance from \"../utils/axiosInstance\";\r\nimport {\r\n    ALL_PRODUCTS_REQUEST,\r\n    ALL_PRODUCTS_SUCCESS,\r\n    ALL_PRODUCTS_FAIL,\r\n    UPDATE_PRODUCT_REQUEST,\r\n    UPDATE_PRODUCT_SUCCESS,\r\n    UPDATE_PRODUCT_FAIL,\r\n    CLEAR_ERRORS,\r\n    TEST_REQUEST,\r\n    TEST_SUCCESS,\r\n    TEST_FAIL,\r\n    TEST_SUBMIT_REQUEST,\r\n    TEST_SUBMIT_SUCCESS,\r\n    TEST_SUBMIT_FAIL,\r\n    TEST_RESULT_REQUEST,\r\n    TEST_RESULT_SUCCESS,\r\n    TEST_RESULT_FAIL,\r\n} from \"../constants/productConstants\";\r\n\r\nexport const getProducts = (category) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ALL_PRODUCTS_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get(`/products?category=${category}`);\r\n\r\n    dispatch({\r\n      type: ALL_PRODUCTS_SUCCESS,\r\n      payload: data.booksByCategory[category] || [],\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_PRODUCTS_FAIL,\r\n      payload: error.response?.data?.message || \"Error fetching products\",\r\n    });\r\n  }\r\n};\r\n\r\n//Update Product\r\nexport const updateProduct = (productId, productData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: UPDATE_PRODUCT_REQUEST });\r\n\r\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n\r\n    const { data } = await axiosInstance.put(`/products/${productId}`, productData, config);\r\n\r\n    dispatch({\r\n      type: UPDATE_PRODUCT_SUCCESS,\r\n      payload: data.product,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: UPDATE_PRODUCT_FAIL,\r\n      payload: error.response?.data?.message || \"Error updating product\",\r\n    });\r\n  }\r\n};\r\n\r\n// Get All Test\r\nexport const getTests = (category) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: TEST_REQUEST });\r\n\r\n    // Fetch tests by category\r\n    const { data: testData } = await axiosInstance.get(`/test?category=${category}`);\r\n\r\n    // Fetch user's attempts\r\n    const { data: attemptsData } = await axiosInstance.get(`/test/my-attempts`);\r\n\r\n    dispatch({\r\n      type: TEST_SUCCESS,\r\n      payload: {\r\n        tests: testData.tests || [],\r\n        attempts: attemptsData.attempts || [],\r\n      },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"❌ Test API Error:\", error.response?.data || error.message);\r\n    dispatch({\r\n      type: TEST_FAIL,\r\n      payload: error.response?.data?.message || \"Error fetching tests\",\r\n    });\r\n  }\r\n};\r\n\r\n\r\n//Submit Test\r\nexport const submitTest = (testData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: TEST_SUBMIT_REQUEST });\r\n\r\n    const { data } = await axiosInstance.post(`/test/submit/${testData.testId}`, testData);\r\n\r\n    dispatch({\r\n      type: TEST_SUBMIT_SUCCESS,\r\n      payload: data.attempt,// assuming response is { attempt: {...} }\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: TEST_SUBMIT_FAIL,\r\n      payload: error.response?.data?.message || error.message,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n//Get Result\r\nexport const getResult = (testId) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: TEST_RESULT_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get(`/test/result/${testId}`);\r\n\r\n    dispatch({\r\n      type: TEST_RESULT_SUCCESS,\r\n      payload: data.result,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: TEST_RESULT_FAIL,\r\n      payload: error.response?.data?.message || error.message,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// Clear Errors\r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS,\r\n    });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}