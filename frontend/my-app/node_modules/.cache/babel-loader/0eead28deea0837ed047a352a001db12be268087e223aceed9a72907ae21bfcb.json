{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\divya\\\\Desktop\\\\Projects\\\\SSBPrep\\\\frontend\\\\my-app\\\\src\\\\components\\\\mockList.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect } from \"react\";\nimport { useLocation, useParams, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getTests } from \"../actions/productActions\";\nimport MetaData from \"./layouts/MetaData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MockList = () => {\n  _s();\n  var _location$state, _location$state2;\n  const location = useLocation();\n  const {\n    exam,\n    mockTest\n  } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const selectedExam = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.selectedExam) || exam;\n  const selectedMockTest = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.selectedMockTest) || mockTest;\n  const {\n    tests,\n    attempts,\n    loading,\n    error\n  } = useSelector(state => state.tests);\n  const pausedTest = JSON.parse(localStorage.getItem(\"pausedTest\"));\n  useEffect(() => {\n    if (selectedExam) {\n      dispatch(getTests(selectedExam));\n    }\n  }, [dispatch, selectedExam]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MetaData, {\n      title: `${selectedExam}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"head-home mock-test\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: (selectedMockTest === null || selectedMockTest === void 0 ? void 0 : selectedMockTest.toLowerCase()) === \"dpp\" ? `${selectedExam} - Daily Practice Papers` : `${selectedExam} - Full Mock Tests`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading tests...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mocks\",\n      children: tests.length > 0 ? tests.map(test => {\n        const isPausedTest = (pausedTest === null || pausedTest === void 0 ? void 0 : pausedTest.testId) === test._id && (pausedTest === null || pausedTest === void 0 ? void 0 : pausedTest.exam) === selectedExam && (pausedTest === null || pausedTest === void 0 ? void 0 : pausedTest.mockTest) === selectedMockTest;\n        const attemptedTest = attempts === null || attempts === void 0 ? void 0 : attempts.find(a => {\n          var _a$test;\n          return ((_a$test = a.test) === null || _a$test === void 0 ? void 0 : _a$test.toString()) === test._id;\n        });\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mock-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: test.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }, this), attemptedTest && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: \"8px\"\n            },\n            children: [\"Score: \", attemptedTest.score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (isPausedTest) {\n                localStorage.removeItem(\"pausedTest\");\n              }\n              if (attemptedTest) {\n                navigate(`/${selectedExam}/${selectedMockTest}/test/result/${attemptedTest._id}`);\n              } else {\n                navigate(`/${selectedExam}/${selectedMockTest}/test/${test._id}`, {\n                  state: {\n                    selectedTest: selectedExam,\n                    test,\n                    isResume: isPausedTest\n                  }\n                });\n              }\n            },\n            children: attemptedTest ? \"View Result\" : isPausedTest ? \"Resume Test\" : \"Start Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 19\n          }, this)]\n        }, test._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tests found for this exam.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(MockList, \"UW2lro3VY9waAmhD/dGzmOdoT+0=\", false, function () {\n  return [useLocation, useParams, useDispatch, useNavigate, useSelector];\n});\n_c = MockList;\nexport default MockList;\nvar _c;\n$RefreshReg$(_c, \"MockList\");","map":{"version":3,"names":["React","Fragment","useEffect","useLocation","useParams","useNavigate","useDispatch","useSelector","getTests","MetaData","jsxDEV","_jsxDEV","MockList","_s","_location$state","_location$state2","location","exam","mockTest","dispatch","navigate","selectedExam","state","selectedMockTest","tests","attempts","loading","error","pausedTest","JSON","parse","localStorage","getItem","children","title","fileName","_jsxFileName","lineNumber","columnNumber","className","toLowerCase","style","color","length","map","test","isPausedTest","testId","_id","attemptedTest","find","a","_a$test","toString","marginBottom","score","onClick","removeItem","selectedTest","isResume","_c","$RefreshReg$"],"sources":["C:/Users/divya/Desktop/Projects/SSBPrep/frontend/my-app/src/components/mockList.js"],"sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport { useLocation, useParams, useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getTests } from \"../actions/productActions\";\r\nimport MetaData from \"./layouts/MetaData\";\r\n\r\nconst MockList = () => {\r\n  const location = useLocation();\r\n  const { exam, mockTest } = useParams();\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const selectedExam = location.state?.selectedExam || exam;\r\n  const selectedMockTest = location.state?.selectedMockTest || mockTest;\r\n\r\n  const { tests, attempts, loading, error } = useSelector((state) => state.tests);\r\n\r\n  const pausedTest = JSON.parse(localStorage.getItem(\"pausedTest\"));\r\n\r\n  useEffect(() => {\r\n    if (selectedExam) {\r\n      dispatch(getTests(selectedExam));\r\n    }\r\n  }, [dispatch, selectedExam]);\r\n\r\n  return (\r\n    <Fragment>\r\n        <MetaData title={`${selectedExam}`} />\r\n      <div className=\"head-home mock-test\">\r\n        <h1>\r\n          {selectedMockTest?.toLowerCase() === \"dpp\"\r\n            ? `${selectedExam} - Daily Practice Papers`\r\n            : `${selectedExam} - Full Mock Tests`}\r\n        </h1>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <p>Loading tests...</p>\r\n      ) : error ? (\r\n        <p style={{ color: \"red\" }}>{error}</p>\r\n      ) : (\r\n        <div className=\"mocks\">\r\n          {tests.length > 0 ? (\r\n            tests.map((test) => {\r\n              const isPausedTest =\r\n                pausedTest?.testId === test._id &&\r\n                pausedTest?.exam === selectedExam &&\r\n                pausedTest?.mockTest === selectedMockTest;\r\n\r\n                const attemptedTest = attempts?.find((a) => a.test?.toString() === test._id);\r\n\r\n              return (\r\n                <div className=\"mock-container\" key={test._id}>\r\n                  <p>{test.title}</p>\r\n                  {attemptedTest && (\r\n                    <p style={{ marginBottom: \"8px\" }}>Score: {attemptedTest.score}</p>\r\n                  )}\r\n\r\n                  <button\r\n                    onClick={() => {\r\n                      if (isPausedTest) {\r\n                        localStorage.removeItem(\"pausedTest\");\r\n                      }\r\n\r\n                      if (attemptedTest) {\r\n                        navigate(`/${selectedExam}/${selectedMockTest}/test/result/${attemptedTest._id}`);\r\n                      } else {\r\n                        navigate(\r\n                          `/${selectedExam}/${selectedMockTest}/test/${test._id}`,\r\n                          {\r\n                            state: {\r\n                              selectedTest: selectedExam,\r\n                              test,\r\n                              isResume: isPausedTest,\r\n                            },\r\n                          }\r\n                        );\r\n                      }\r\n                    }}\r\n                  >\r\n                    {attemptedTest\r\n                      ? \"View Result\"\r\n                      : isPausedTest\r\n                      ? \"Resume Test\"\r\n                      : \"Start Test\"}\r\n                  </button>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <p>No tests found for this exam.</p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default MockList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}