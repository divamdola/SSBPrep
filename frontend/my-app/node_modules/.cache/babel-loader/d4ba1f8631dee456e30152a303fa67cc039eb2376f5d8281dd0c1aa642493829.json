{"ast":null,"code":"import axiosInstance from \"../utils/axiosInstance\";\nimport { ALL_PRODUCTS_REQUEST, ALL_PRODUCTS_SUCCESS, ALL_PRODUCTS_FAIL, CLEAR_ERRORS, TEST_REQUEST, TEST_SUCCESS, TEST_FAIL } from \"../constants/productConstants\";\nexport const getProducts = category => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_PRODUCTS_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.get(`/products?category=${category}`);\n    dispatch({\n      type: ALL_PRODUCTS_SUCCESS,\n      payload: data.booksByCategory[category] || []\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: ALL_PRODUCTS_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error fetching products\"\n    });\n  }\n};\n\n// Get All Test\nexport const getTests = category => async dispatch => {\n  try {\n    dispatch({\n      type: TEST_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.get(`/test?category=${category}`);\n    dispatch({\n      type: TEST_SUCCESS,\n      payload: data.tests || []\n    });\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response3$data;\n    console.error(\"❌ Test API Error:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    dispatch({\n      type: TEST_FAIL,\n      payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"Error fetching tests\"\n    });\n  }\n};\n\n//Submit Test\nconst handleSubmit = useCallback(async () => {\n  if (!currentTest || !currentTest.questions) return;\n  const payload = {\n    testId: currentTest._id,\n    answers: currentTest.questions.map((_, idx) => answers[idx] || null),\n    timeTaken: currentTest.timeDuration * 60 - timeLeft\n  };\n  try {\n    const {\n      data\n    } = await axiosInstance.post(`/test/submit/${currentTest._id}`, payload);\n    alert(`✅ Test submitted! Your score: ${data.attempt.score}`);\n    localStorage.removeItem(\"pausedTest\");\n    navigate(\"/\");\n  } catch (error) {\n    var _error$response4;\n    console.error(\"❌ Error submitting test:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    alert(\"❌ Something went wrong while submitting the test.\");\n  }\n}, [answers, currentTest, timeLeft, navigate]);\n\n// Clear Errors\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axiosInstance","ALL_PRODUCTS_REQUEST","ALL_PRODUCTS_SUCCESS","ALL_PRODUCTS_FAIL","CLEAR_ERRORS","TEST_REQUEST","TEST_SUCCESS","TEST_FAIL","getProducts","category","dispatch","type","data","get","payload","booksByCategory","error","_error$response","_error$response$data","response","message","getTests","tests","_error$response2","_error$response3","_error$response3$data","console","handleSubmit","useCallback","currentTest","questions","testId","_id","answers","map","_","idx","timeTaken","timeDuration","timeLeft","post","alert","attempt","score","localStorage","removeItem","navigate","_error$response4","clearErrors"],"sources":["C:/Users/divya/Desktop/Projects/SSBPrep/frontend/my-app/src/actions/productActions.js"],"sourcesContent":["import axiosInstance from \"../utils/axiosInstance\";\r\nimport {\r\n    ALL_PRODUCTS_REQUEST,\r\n    ALL_PRODUCTS_SUCCESS,\r\n    ALL_PRODUCTS_FAIL,\r\n    CLEAR_ERRORS,\r\n    TEST_REQUEST,\r\n    TEST_SUCCESS,\r\n    TEST_FAIL,\r\n} from \"../constants/productConstants\";\r\n\r\nexport const getProducts = (category) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ALL_PRODUCTS_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get(`/products?category=${category}`);\r\n\r\n    dispatch({\r\n      type: ALL_PRODUCTS_SUCCESS,\r\n      payload: data.booksByCategory[category] || [],\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_PRODUCTS_FAIL,\r\n      payload: error.response?.data?.message || \"Error fetching products\",\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// Get All Test\r\nexport const getTests = (category) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: TEST_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get(`/test?category=${category}`);\r\n    \r\n    dispatch({\r\n      type: TEST_SUCCESS,\r\n      payload: data.tests || [],\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"❌ Test API Error:\", error.response?.data || error.message);\r\n    dispatch({\r\n      type: TEST_FAIL,\r\n      payload: error.response?.data?.message || \"Error fetching tests\",\r\n    });\r\n  }\r\n};\r\n\r\n//Submit Test\r\nconst handleSubmit = useCallback(async () => {\r\n  if (!currentTest || !currentTest.questions) return;\r\n\r\n  const payload = {\r\n    testId: currentTest._id,\r\n    answers: currentTest.questions.map((_, idx) => answers[idx] || null),\r\n    timeTaken: (currentTest.timeDuration * 60) - timeLeft,\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post(`/test/submit/${currentTest._id}`, payload);\r\n\r\n    alert(`✅ Test submitted! Your score: ${data.attempt.score}`);\r\n    localStorage.removeItem(\"pausedTest\");\r\n    navigate(\"/\");\r\n  } catch (error) {\r\n    console.error(\"❌ Error submitting test:\", error.response?.data || error.message);\r\n    alert(\"❌ Something went wrong while submitting the test.\");\r\n  }\r\n}, [answers, currentTest, timeLeft, navigate]);\r\n\r\n// Clear Errors\r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS,\r\n    });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}