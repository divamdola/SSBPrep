{"ast":null,"code":"import axiosInstance from \"../utils/axiosInstance\";\nimport { ALL_USER_REQUEST, ALL_USER_SUCCESS, ALL_USER_FAIL, UPDATE_USER_ROLE_SUCCESS, UPDATE_USER_ROLE_REQUEST } from \"../constants/adminConstants\";\nimport { CLEAR_ERRORS } from \"../constants/userConstants\";\n\n//Load All Users\nexport const loadAllUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_USER_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.get(\"/admin/users\");\n    dispatch({\n      type: ALL_USER_SUCCESS,\n      payload: data.users\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: ALL_USER_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error fetching users\"\n    });\n  }\n};\n\n//Update User Role\nexport const updateUserRole = (userId, role) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER_ROLE_REQUEST\n    });\n    const {\n      data\n    } = await axiosInstance.put(`/admin/user/${userId}`, {\n      role\n    });\n    dispatch({\n      type: UPDATE_USER_ROLE_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    dispatch({\n      type: UPDATE_USER_ROLE_FAIL,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Error updating user role\"\n    });\n  }\n};\n\n//Clear Errors\nexport const clearError = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axiosInstance","ALL_USER_REQUEST","ALL_USER_SUCCESS","ALL_USER_FAIL","UPDATE_USER_ROLE_SUCCESS","UPDATE_USER_ROLE_REQUEST","CLEAR_ERRORS","loadAllUsers","dispatch","type","data","get","payload","users","error","_error$response","_error$response$data","response","message","updateUserRole","userId","role","put","user","_error$response2","_error$response2$data","UPDATE_USER_ROLE_FAIL","clearError"],"sources":["C:/Users/divya/Desktop/Projects/SSBPrep/frontend/my-app/src/actions/adminActions.js"],"sourcesContent":["import axiosInstance from \"../utils/axiosInstance\";\r\nimport {\r\n  ALL_USER_REQUEST,\r\n  ALL_USER_SUCCESS,\r\n  ALL_USER_FAIL,\r\n  UPDATE_USER_ROLE_SUCCESS,\r\n    UPDATE_USER_ROLE_REQUEST,\r\n} from \"../constants/adminConstants\";\r\nimport { CLEAR_ERRORS } from \"../constants/userConstants\";\r\n\r\n//Load All Users\r\nexport const loadAllUsers = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ALL_USER_REQUEST });\r\n    const { data } = await axiosInstance.get(\"/admin/users\");\r\n    dispatch({ type: ALL_USER_SUCCESS, payload: data.users });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_USER_FAIL,\r\n      payload: error.response?.data?.message || \"Error fetching users\",\r\n    });\r\n  }\r\n};\r\n\r\n//Update User Role\r\nexport const updateUserRole = (userId, role) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: UPDATE_USER_ROLE_REQUEST });\r\n\r\n    const { data } = await axiosInstance.put(`/admin/user/${userId}`, { role });\r\n\r\n    dispatch({ type: UPDATE_USER_ROLE_SUCCESS, payload: data.user });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: UPDATE_USER_ROLE_FAIL,\r\n      payload: error.response?.data?.message || \"Error updating user role\",\r\n    });\r\n  }\r\n};\r\n\r\n//Clear Errors\r\nexport const clearError = () => async (dispatch) => {\r\n  dispatch({ type: CLEAR_ERRORS });\r\n};\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,wBAAwB;AAClD,SACEC,gBAAgB,EAChBC,gBAAgB,EAChBC,aAAa,EACbC,wBAAwB,EACtBC,wBAAwB,QACrB,6BAA6B;AACpC,SAASC,YAAY,QAAQ,4BAA4B;;AAEzD;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACpD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAER;IAAiB,CAAC,CAAC;IACpC,MAAM;MAAES;IAAK,CAAC,GAAG,MAAMV,aAAa,CAACW,GAAG,CAAC,cAAc,CAAC;IACxDH,QAAQ,CAAC;MAAEC,IAAI,EAAEP,gBAAgB;MAAEU,OAAO,EAAEF,IAAI,CAACG;IAAM,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdR,QAAQ,CAAC;MACPC,IAAI,EAAEN,aAAa;MACnBS,OAAO,EAAE,EAAAG,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI;IAC5C,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK,MAAOb,QAAQ,IAAK;EAClE,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEJ;IAAyB,CAAC,CAAC;IAE5C,MAAM;MAAEK;IAAK,CAAC,GAAG,MAAMV,aAAa,CAACsB,GAAG,CAAC,eAAeF,MAAM,EAAE,EAAE;MAAEC;IAAK,CAAC,CAAC;IAE3Eb,QAAQ,CAAC;MAAEC,IAAI,EAAEL,wBAAwB;MAAEQ,OAAO,EAAEF,IAAI,CAACa;IAAK,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOT,KAAK,EAAE;IAAA,IAAAU,gBAAA,EAAAC,qBAAA;IACdjB,QAAQ,CAAC;MACPC,IAAI,EAAEiB,qBAAqB;MAC3Bd,OAAO,EAAE,EAAAY,gBAAA,GAAAV,KAAK,CAACG,QAAQ,cAAAO,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBd,IAAI,cAAAe,qBAAA,uBAApBA,qBAAA,CAAsBP,OAAO,KAAI;IAC5C,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EAClDA,QAAQ,CAAC;IAAEC,IAAI,EAAEH;EAAa,CAAC,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}